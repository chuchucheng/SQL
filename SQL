SELECT DISTINCT country FROM films;

SELECT COUNT(*)

SELECT title, release_year
FROM films
WHERE release_year BETWEEN 1990 AND 2000
AND budget > 100000000
AND (language = 'Spanish' OR language = 'French');

WHERE release_year IN (1990, 2000)

SELECT name
FROM people
WHERE deathdate IS NULL
AND name IS NOT NULL;

WHERE name LIKE '_r%';
  /* %	Allows you to match any string of any length (including zero length)
    _	Allows you to match on a single character
    in this case, Arthur, Urgent will be returned*/

WHERE name NOT LIKE 'A%';

SELECT SUM(duration)       AVG,MIN,MAX
FROM films

SELECT title,
       (gross - budget) AS net_profit
       (duration/60.0) AS duration_hours
       AVG(duration)/60.0 AS avg_duration_hours
FROM films;

SELECT COUNT(deathdate)*100.0/COUNT(*) AS percentage_dead
FROM people;

SELECT MAX(release_year)-MIN(release_year) AS difference
FROM films;

SELECT (MAX(release_year)-MIN(release_year))/10 AS number_of_decades
FROM films;

SELECT *
FROM films
WHERE release_year <> 2015
ORDER BY duration;

/* <> not equal
 default order is ASC, can specify DESC*/

WHERE title like 'M%'
ORDER BY title DESC, duration;

SELECT country, release_year, COUNT(*)
FROM films
GROUP BY release_year, country
ORDER BY country, release_year;



SELECT country,
    AVG(budget) AS avg_budget,
    AVG(gross) AS avg_gross
FROM films
WHERE release_year > 1990
GROUP BY country
HAVING COUNT(title) > 10
ORDER BY country DESC
LIMIT 5
-- where and count can't use together, so use HAVING here

-- JOIN
SELECT cities.name AS city,
       countries.name AS country, region
FROM cities
INNER JOIN countries
ON cities.country_code = countries.code;

SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code
INNER JOIN economies AS e
ON c.code = e.code AND p.year = e.year;

USING(code);
/* inner join - matching or overlapping data
  left outer join -  return all the data in A and the shared data from B
  full outer join - all data

  USING is equivalent to ON ... = ...
*/

--self join
SELECT p1.country_code,
       p1.size AS size2010,
       p2.size AS size2015,
       ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc
FROM populations AS p1
INNER JOIN populations AS p2
ON  p1.country_code = p2.country_code
    AND p1.year=p2.year-5;


SELECT country_code, size,
    CASE WHEN size > 50000000 THEN 'large'
        WHEN size > 1000000 THEN 'medium'
        ELSE 'small' END
        AS popsize_group
INTO pop_plus
FROM populations
WHERE year = 2015;

SELECT name, continent, geosize_group, popsize_group
FROM countries_plus AS c
INNER JOIN pop_plus as p
ON c.code = p.country_code
ORDER BY geosize_group DESC;

SELECT region, AVG(gdp_percapita) AS avg_gdp
FROM countries AS c
LEFT JOIN economies AS e
USING (code)
WHERE year = 2010
GROUP BY region
ORDER BY avg_gdp DESC;

SELECT countries.name, code, languages.name AS language
FROM languages
LEFT JOIN countries
USING (code)
WHERE countries.name LIKE 'V%' OR countries.name IS NULL
ORDER BY countries.name;

SELECT c.name AS country, region, l.name AS language,
       basic_unit, frac_unit
FROM countries AS c
FULL JOIN languages AS l
USING (code)
FULL JOIN currencies AS c1
USING (code)
WHERE region LIKE 'M%esia';


SELECT c.name AS city, l.name AS language
FROM cities AS c
CROSS JOIN languages AS l  -- cross join, all combinations city1, language 1-10...
WHERE c.name LIKE 'Hyder%';

SELECT c.name AS country, region, life_expectancy AS life_exp
FROM countries AS c
LEFT JOIN populations AS p
ON c.code = p.country_code
WHERE year = 2010
ORDER BY life_exp
LIMIT 5;


-- UNION
/*The join such as INNER JOIN or LEFT JOIN combines columns from two tables
while the UNION combines rows from two queries.
join appends the result sets horizontally, union vertically.*/
SELECT country_code
  FROM cities
UNION
SELECT code
  FROM currencies
ORDER BY country_code;
/*union - no duplicates bewteen tables,
  union all - include duplicates between tables
  intersect - shared occurance (if select different variables, then output none)
  Except - non-shared occurance in A
*/
-- non-capital cities
SELECT name
  FROM cities
EXCEPT
SELECT capital
  FROM countries
ORDER BY name;

-- Semi JOIN
--  the unique languages spoken in the Middle East
SELECT DISTINCT name FROM languages
WHERE code IN
  -- Subquery
  (SELECT code FROM countries
   WHERE region = 'Middle East')
ORDER BY name;

-- functions the same as above
SELECT DISTINCT languages.name AS language
FROM languages
INNER JOIN countries
ON languages.code = countries.code
WHERE region = 'Middle East'
ORDER BY language;


-- anti join, the Oceania countries not in currencies
SELECT code, name
FROM countries
 WHERE continent = 'Oceania'
  AND code NOT IN
  	(SELECT code
  	 FROM currencies);


     SELECT name
      FROM cities AS c1
       WHERE country_code IN
     (
         SELECT e.code
         FROM economies AS e
         -- Get all additional (unique) values of the field from currencies AS c2
         UNION
         SELECT c2.code
         FROM currencies AS c2
         -- Exclude those appearing in populations AS p
         EXCEPT
         SELECT p.country_code
         FROM populations AS p
     );


-- Subquery
SELECT *
  FROM populations
WHERE life_expectancy >
  -- 1.15 * subquery
  1.15*(SELECT AVG(life_expectancy)
   FROM populations
   WHERE year = 2015)
  AND year = 2015;

SELECT name, country_code, urbanarea_pop
  FROM cities
WHERE name IN
  (SELECT capital
   FROM countries)
ORDER BY urbanarea_pop DESC;

--the following two get the same results
SELECT countries.name AS country, COUNT(*) AS cities_num
  FROM cities
    INNER JOIN countries
    ON countries.code = cities.country_code
GROUP BY country
ORDER BY cities_num DESC, country
LIMIT 9;

SELECT countries.name AS country,
  (SELECT COUNT(*)
   FROM cities
   WHERE countries.code = cities.country_code) AS cities_num
FROM countries
ORDER BY cities_num DESC, country
LIMIT 9;


SELECT local_name, lang_num
  FROM countries,
  	-- Subquery (alias as subquery)
  	(SELECT code, COUNT(*) AS lang_num
        FROM languages
        GROUP BY code) AS subquery
  WHERE countries.code = subquery.code
ORDER BY lang_num DESC;



-- subsub
SELECT name, continent, inflation_rate
  FROM countries
	INNER JOIN economies
	ON countries.code = economies.code
  WHERE year = 2015
    AND inflation_rate IN (
        SELECT MAX(inflation_rate) as max_inf
        FROM  (SELECT name, continent, inflation_rate
                FROM countries
                INNER JOIN economies
                USING (code)
                WHERE year = 2015) AS  subquery
        GROUP BY continent);


SELECT code, inflation_rate, unemployment_rate
      FROM economies
      WHERE year = 2015 AND code NOT IN
          	(SELECT code
          	 FROM countries
          	 WHERE (gov_form = 'Constitutional Monarchy' OR gov_form LIKE '%Republic%'))
  ORDER BY inflation_rate;


SELECT DISTINCT name, total_investment, imports
    FROM countries AS c
      LEFT JOIN economies AS e
        ON (c.code = e.code
        -- and code in Subquery
          AND c.code IN (
            SELECT l.code
            FROM languages AS l
            WHERE official = 'true'
          ) )
    WHERE region = 'Central America' AND year = 2015
  ORDER BY name;


SELECT name, country_code, city_proper_pop, metroarea_pop,
      city_proper_pop/metroarea_pop  * 100 AS city_perc
  FROM cities
  WHERE name IN
    (SELECT capital
     FROM countries
     WHERE (continent = 'Europe'
        OR continent LIKE '%America'))
       AND metroarea_pop IS NOT NULL
ORDER BY city_perc DESC
LIMIT 10;
